{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_nearest_idx(array, value):\n",
    "    array = np.asarray(array)\n",
    "    return (np.abs(array - value)).argmin()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "'OGridClass' object is not callable",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-22-d4838e6c5479>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m# data = np.load('./data.npy')\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mx\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0my\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mogrid\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m10\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mdata\u001b[0m \u001b[1;33m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mzeros\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m100\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m100\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m100\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m24\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m24\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m:\u001b[0m \u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[0mdata\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m25\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m25\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m:\u001b[0m \u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m1.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: 'OGridClass' object is not callable"
     ]
    }
   ],
   "source": [
    "# data = np.load('./data.npy')\n",
    "x,y = np.mgrid(10,10)\n",
    "data =np.zeros([100,100,100])\n",
    "data[24, 24, : ] = 1.\n",
    "data[25, 25, : ] = 1.\n",
    "data[26, 26, : ] = 1.\n",
    "print(data.sum())\n",
    "\n",
    "print(x,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(100, 100, 100)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "fs = 2.5e6  # sampling frequency, (Hz)\n",
    "dx = 1      # spatial sampling step along X in (mm)\n",
    "dy = 1      # spatial sampling step along Y in (mm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_max = dy * data.shape[0]  # mm\n",
    "x_max = dx * data.shape[1]  # mm\n",
    "t_max = data.shape[2] / fs  # s"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = np.linspace(0, y_max, data.shape[0])   # mm\n",
    "x = np.linspace(0, x_max, data.shape[1])   # mm\n",
    "\n",
    "yy, xx = np.meshgrid(y, x, indexing='ij')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-18-3c84faeac35e>:3: MatplotlibDeprecationWarning: shading='flat' when X and Y have the same dimensions as C is deprecated since 3.3.  Either specify the corners of the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud', or set rcParams['pcolor.shading'].  This will become an error two minor releases later.\n",
      "  plt.pcolormesh(xx, yy, data[:,time_stamp,:])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'y, mm')"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "time_stamp = 24 # µs\n",
    "plt.figure()\n",
    "plt.pcolormesh(xx, yy, data[:,time_stamp,:])\n",
    "plt.xlabel('x, mm')\n",
    "plt.ylabel('y, mm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "spectrum_3d = np.fft.fftn(data)                            # Fourrier transform alon Y, X and T axes to obtain ky, kx, f\n",
    "\n",
    "spectrum_3d_sh = np.fft.fftshift(spectrum_3d, axes=(0,1))  # Apply frequency shift along spatial dimentions so\n",
    "                                                           # that zero-frequency component appears at the center of the spectrum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "ky = np.linspace(-np.pi / y_max, np.pi / y_max, data.shape[0])  # wavenumber along Y axis (rad/mm)\n",
    "kx = np.linspace(-np.pi / x_max, np.pi / x_max, data.shape[1])  # wavenumber along X axis (rad/mm)\n",
    "f  = np.linspace(0, fs, data.shape[2])                          # frequency (Hz)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "Ky, Kx = np.meshgrid(ky, kx, indexing='ij')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "freq_to_observe = 40e3     # Hz\n",
    "f_idx = find_nearest_idx(f, freq_to_observe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'ky, rad/mm')"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure()\n",
    "psd = plt.pcolormesh(Kx, Ky, abs(spectrum_3d_sh[:,:,f_idx])**2)\n",
    "cbar = plt.colorbar(psd, label='PSD')\n",
    "plt.xlabel('kx, rad/mm')\n",
    "plt.ylabel('ky, rad/mm')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
